<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.encore.outpick_backend.ProductionRequest.mapper.ProductionRequestMapper">
    <!-- 관리자 : 생산요청서 리스트 전체 조회 -->
    <select id="read_pr_list"
            resultType="com.encore.outpick_backend.ProductionRequest.domain.ProductionRequestDTO">
    <!-- 피그마에 필요한 데이터 : 요청서 id, 요청일, 담당자, 결제상태 -->
        SELECT
            production_request_id,
            request_date,
            e.name AS employee_name,
            approval
        FROM
            production_request pr
        JOIN
            employee e ON pr.employee_id = e.employee_id

    </select>

    <!-- 사원 : 자신이 작성한 생산요청서 리스트 전체 조회 -->
    <select id="read_pr_empList"
            parameterType="int"
            resultType="com.encore.outpick_backend.ProductionRequest.domain.ProductionRequestDTO">
    <!-- 피그마에 필요한 데이터 : 요청서 id, 요청일, 담당자, 결제상태 -->
        SELECT
            production_request_id,
            request_date,
            e.name AS employee_name,
            approval
        FROM
            production_request pr
        JOIN
            employee e ON pr.employee_id = e.employee_id
        WHERE
            e.employee_number = #{employee_number}
    </select>

    <!-- 관리자 : 모든 생산요청서의 상세정보 단일 조회 -->
    <select id="read_pr_detail"
            parameterType="int"
            resultType="com.encore.outpick_backend.ProductionRequest.domain.ProductionRequestDTO">
        <!-- 피그마에 필요한 데이터 : 날짜, 작성한 사원 이름, 관리자의 결제 상태, 상품 ID,
          상품명, 주문수량, 원가-->
        SELECT
            pr.production_request_id,
            request_date,
            e.name AS employee_name,
            approval,
            pr.product_id,
            p.name AS product_name,
            amount,
            p.first_cost AS product_first_cost
        FROM
            production_request pr
        JOIN
            employee e ON pr.employee_id = e.employee_id
        JOIN
            product p ON pr.product_id = p.product_id
        WHERE
            production_request_id = #{id}

    </select>

    <!-- 사원 : 자신이 작성한 생산요청서의 상세정보 단일 조회 -->
    <select id="read_pr_empDetail"
            parameterType="int"
            resultType="com.encore.outpick_backend.ProductionRequest.domain.ProductionRequestDTO">
        <!-- 피그마에 필요한 데이터 : 날짜, 작성한 사원 이름, 관리자의 결제 상태, 상품 ID,
          상품명, 주문수량, 원가-->
        SELECT
            pr.production_request_id,
            request_date,
            e.name AS employee_name,
            approval,
            pr.product_id,
            p.name AS product_name,
            amount,
            p.first_cost AS product_first_cost
        FROM
            production_request pr
        JOIN
            employee e ON pr.employee_id = e.employee_id
        JOIN
            product p ON pr.product_id = p.product_id
        WHERE
            production_request_id = #{id} AND employee_number = #{employee_number}

    </select>

    <!-- 관리자는 사원이 작성한 생산요청서에 대해서 승인할 수 있다. -->
    <update id="confirm_pr"
            parameterType="int">
        UPDATE
            production_request
        SET
            approval = 'y', admin_id = (select admin_id from admin where employee_number = #{employee_number})
        WHERE
            production_request_id = #{id}
    </update>


    <!-- 사원은 자신이 작성한 생산요청서에서 상품 번호, 주문수량을 수정할 수 있다. -->
    <!-- 날짜는 수정일로 자동 수정된다 -->
    <update id="update_pr"
            parameterType="com.encore.outpick_backend.ProductionRequest.domain.ProductionUpdateDTO">
        UPDATE
            production_request pr
            JOIN employee e ON pr.employee_id = e.employee_id
        SET
            request_date = sysdate(),
            pr.product_id = #{product_id},
            amount = #{amount}
        WHERE
            production_request_id = #{production_request_id} AND e.employee_number = #{employee_number}

    </update>

    <!-- 사원은 자신이 작성한 생산요청서 삭제할 수 있다. -->
    <delete id="delete_pr"
            parameterType="int">
        DELETE pr
        FROM
            production_request pr
            JOIN employee e ON pr.employee_id = e.employee_id
        WHERE
            pr.production_request_id = #{id} AND e.employee_number = #{employee_number}




    </delete>
</mapper>